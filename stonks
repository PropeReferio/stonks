#!/usr/bin/env python
import argparse
import decimal

import requests
from bs4 import BeautifulSoup

def get_roi_from_symbol(symbol):
    pass
    # TODO: scrape yahoo or similar for an ROI

def table_output(principal, roi):
    D = decimal.Decimal
    TWOPLACES = D('0.01')
    table_width = 51
    line_break = "=" * table_width
    years = [5,10,20,30,40,50]
    header = f"Results for a principal of ${D(str(principal)).quantize(TWOPLACES):,}"
    centered_header = f"{header:^51}"
    output_list = [line_break, centered_header, line_break + '\n\n']
    weak_roi = roi - 2.5
    table_params = f"{'Years' : >5} | {str(weak_roi)+'%' : >20} | {str(roi)+'%' : >20}"
    thin_break = "-" * table_width
    output_list.append(table_params)
    output_list.append(thin_break)
    for i in range(len(years)):
        weak_year = f"${D(str((weak_roi/100+1)**years[i] * principal)).quantize(TWOPLACES) :,}"
        good_year = f"${D(str((roi/100+1)**years[i] * principal)).quantize(TWOPLACES) :,}"
        year_row = f"{years[i] : >5} | {weak_year : >20} | {good_year : >20}"
        output_list.append(year_row)
        output_list.append(thin_break)
    print('\n'.join(output_list))

def main():
    parser = argparse.ArgumentParser(description="A CLI ROI calculator. Prints out the final value of \
                                                 an investment in a table format, or for a specific year.")
    parser.add_argument("-p",
                        "--principal",
                        help="The initial investement as a dollar amount.",
                        type=float,
                        required=True)
    output_group = parser.add_mutually_exclusive_group(required=True)
    output_group.add_argument("-y",
                              "--years",
                              help="The number of years the investment will be held.",
                              type=float)
    output_group.add_argument("-t",
                              "--table",
                              help="Rather than get the ROI for a single time value, outputs a table with ROIs for \
                                   multiple time values.",
                              action='store_true')
    roi_group = parser.add_mutually_exclusive_group(required=True)
    roi_group.add_argument("-r",
                           "--roi",
                           help="A percentage value used to calcuate yearly interest. Ex: 11.5",
                           type=float)
    roi_group.add_argument("-s",
                           "--symbol",
                           help="The trading symbol. The program scrapes the ROI from a web page. Ex: SWPPX",
                           type=str)

    args = parser.parse_args()

    roi = args.roi if args.roi else get_roi_from_symbol(args.symbol)
    principal = int(args.principal) if args.principal == int(args.principal) else args.principal

    if args.years:
        years = int(args.years) if args.years == int(args.years) else args.years
        final = round(args.principal * (roi / 100 + 1) ** years, 2)
        print(f"After {years} years with a principal of ${principal:,} and an ROI of {roi}%, the final value would be ${final:,}")
    elif args.table:
        table_output(principal, roi)


if __name__ == "__main__":
    main()
